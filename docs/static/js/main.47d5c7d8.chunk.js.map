{"version":3,"sources":["components/Input/NumberInput.js","components/Result/Result.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["NumberInput","props","id","label","showDollarLabel","showPercentLabel","value","onChange","errorState","_useState","useState","_useState2","Object","slicedToArray","showError","setShowError","inputClassName","react_default","a","createElement","className","htmlFor","e","onBlur","type","name","required","Result","resultData","html","forEach","s","push","key","sectionName","sectionRows","prop","sectionData","concat","toFixed","Form","cost","setCost","_useState3","_useState4","items","setItems","_useState5","_useState6","time","setTime","_useState7","_useState8","wage","setWage","_useState9","_useState10","markup","setMarkup","_validate","number0OrMoreFunc","p","isNaN","validationFunctions","errors","isFormValid","keys","i","validate","data","costToMake","profit","retailPrice","Cost to make","Retail price","Profit","calculateResults","Input_NumberInput","target","components_Result_Result","App","components_Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47d5c7d8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Input.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NumberInput = (props) => {\r\n  const {id, label, showDollarLabel, showPercentLabel, value, onChange, errorState} = props;\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  //todo clean up\r\n  let inputClassName = 'number-input__wrapper';\r\n  if (showDollarLabel || showPercentLabel) {\r\n    inputClassName += ' number-input__wrapper--icon';\r\n  }\r\n  if (showPercentLabel) {\r\n    inputClassName += ' number-input__wrapper--icon-right';\r\n  }\r\n\r\n  return (\r\n    <div className=\"number-input\">\r\n      <label className=\"number-input__label\" htmlFor={id}>\r\n        {label}\r\n      </label>\r\n\r\n      <div className={inputClassName}>\r\n        <input value={value}\r\n          onChange={e => onChange(e)}\r\n          onBlur={() => setShowError(true)}\r\n          id={id}\r\n          type=\"number\"\r\n          name={id}\r\n          required\r\n        />\r\n        {showDollarLabel && <i>$</i>}\r\n        {showPercentLabel && <i>%</i>}\r\n      </div>\r\n\r\n      {errorState !== false && showError && \r\n        <div className=\"number-input__error\">{errorState}</div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nNumberInput.propTypes = {\r\n  id: PropTypes.string,\r\n  label: PropTypes.string,\r\n  showDollarLabel: PropTypes.bool,\r\n  showPercentLabel: PropTypes.bool,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  errorState: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\r\n}\r\n\r\nexport default NumberInput;\r\n\r\n","import React from 'react';\r\nimport './Result.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Result = (props) => {\r\n    const { resultData } = props;\r\n    let html = [];\r\n\r\n    resultData.forEach(s => {\r\n      html.push(\r\n        <h3 key={s.sectionName}>{s.sectionName}</h3>\r\n      );\r\n\r\n      let sectionRows = [];\r\n\r\n      for (const prop in s.sectionData) {\r\n        sectionRows.push(\r\n          <tr className=\"result-list__tr\" key={`${s.sectionName} ${prop}`}>\r\n            <td className=\"result-list__td\">{prop}: </td>\r\n            <td className=\"result-list__td\">${s.sectionData[prop].toFixed(2)}</td>\r\n          </tr>\r\n        );\r\n      }\r\n\r\n      html.push(\r\n        <table key={`${s.sectionName}-table`}>\r\n          {sectionRows}\r\n        </table>\r\n      )\r\n    })\r\n    \r\n    return (\r\n      <div className=\"result-list\">\r\n        {html}\r\n      </div>\r\n    )\r\n};\r\n\r\nResult.propTypes = {\r\n  resultData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      sectionName: PropTypes.string,\r\n      sectionData: PropTypes.objectOf(PropTypes.number)\r\n    })\r\n  )\r\n}\r\n\r\nexport default Result;","/* \r\ntodo: \r\ntime input with minutes\r\nwrite test for input\r\nformat prices\r\nfavicon\r\nstyling\r\n*/\r\n\r\nimport React, { useState } from 'react';\r\nimport NumberInput from '../Input/NumberInput';\r\nimport Result from '../Result/Result';\r\n\r\nimport './Form.css';\r\n\r\nconst calculateResults = (data) => {\r\n  const { cost, items, time, wage, markup } = data;\r\n\r\n  const materialsPerItem = cost / items;\r\n  const wagePerItem = (time * wage) / items;\r\n  const costToMake = materialsPerItem + wagePerItem;\r\n  const profit = costToMake * (markup / 100)\r\n  const retailPrice = costToMake + profit;\r\n\r\n  let resultData = [\r\n    {\r\n      sectionName: \"Single item\",\r\n      sectionData: {\r\n        \"Cost to make\": costToMake,\r\n        \"Retail price\": retailPrice,\r\n        \"Profit\": profit,\r\n      }\r\n    }\r\n  ];\r\n\r\n  if (items > 1) {\r\n    resultData.push(\r\n      {\r\n        sectionName: `Batch of ${items} items `,\r\n        sectionData: {\r\n          \"Cost to make\": costToMake * items,\r\n          \"Retail price\": retailPrice * items,\r\n          \"Profit\": profit * items,\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  return resultData;\r\n}\r\n\r\nconst validate = (props) => { \r\n  const number0OrMoreFunc = ((p) => (p < 0 || p === \"\" || isNaN(p)) \r\n  ? \"Needs to be 0 or more\" \r\n  : false)\r\n\r\n  // todo this is a bit repetitive\r\n  // but later on could need different validation func for time (hours/mins etc)\r\n  const validationFunctions = {\r\n    cost: number0OrMoreFunc,\r\n    items: ((p) => (p < 1 || p === \"\" || isNaN(p)) \r\n    ? \"Needs to be 1 or more\" \r\n    : false),\r\n    time: number0OrMoreFunc,\r\n    wage: number0OrMoreFunc,\r\n    markup: number0OrMoreFunc,\r\n  }\r\n\r\n  let errors = {};\r\n  let isFormValid = true;\r\n\r\n  //check each prop against its validation function and set form to invalid as soon as there's an error somewhere\r\n  Object.keys(props).forEach((i) => {\r\n    errors[i] = validationFunctions[i](props[i]);\r\n    if (validationFunctions[i](props[i])) {\r\n      isFormValid = false;\r\n    }\r\n  })\r\n\r\n  return { errors, isFormValid }\r\n};\r\n\r\nconst Form = (props) => {\r\n  const [cost, setCost] = useState(\"\");\r\n  const [items, setItems] = useState(\"1\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [wage, setWage] = useState(\"\");\r\n  const [markup, setMarkup] = useState(\"\");\r\n\r\n  const { errors, isFormValid } = validate({cost,items,time,wage,markup});\r\n  let resultData = {};\r\n\r\n  if (isFormValid) {\r\n    resultData = calculateResults({cost,items,time,wage,markup});\r\n  }\r\n\r\n  // todo iterate over array to generate NumberInputs?\r\n  return (\r\n    <div className=\"form\">\r\n      <NumberInput\r\n        value={cost}\r\n        onChange={e => setCost(e.target.value)}\r\n        label=\"Cost of materials\"\r\n        id=\"cost\"\r\n        errorState={errors.cost}\r\n        showDollarLabel\r\n      />\r\n\r\n      <NumberInput\r\n        value={items}\r\n        onChange={e => setItems(e.target.value)}\r\n        label=\"Number of items made\"\r\n        id=\"items\"\r\n        errorState={errors.items}\r\n      />\r\n\r\n      <NumberInput\r\n        value={time}\r\n        onChange={e => setTime(e.target.value)}\r\n        label={`Hours to make ${(items > 1) ? items + ' items' : 'an item'}`}\r\n        id=\"time\"\r\n        errorState={errors.time}\r\n      />\r\n\r\n      <NumberInput\r\n        value={wage}\r\n        onChange={e => setWage(e.target.value)}\r\n        label=\"Hourly wage\"\r\n        id=\"wage\"\r\n        errorState={errors.wage}\r\n        showDollarLabel\r\n      />\r\n\r\n      <NumberInput\r\n        value={markup}\r\n        onChange={e => setMarkup(e.target.value)}\r\n        label=\"Retail profit markup %\"\r\n        id=\"markup\"\r\n        errorState={errors.markup}\r\n        showPercentLabel\r\n      />\r\n\r\n      {isFormValid && <Result resultData={resultData} />}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Form from './components/Form/Form';\r\n\r\nconst App = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>Craft Pricing Calculator</h2>\r\n        <Form />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}